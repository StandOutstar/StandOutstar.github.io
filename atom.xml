<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://StandOutstar.github.io</id>
    <title>StandOutstar</title>
    <updated>2019-07-17T02:16:44.625Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://StandOutstar.github.io"/>
    <link rel="self" href="https://StandOutstar.github.io/atom.xml"/>
    <subtitle>Blog</subtitle>
    <logo>https://StandOutstar.github.io/images/avatar.png</logo>
    <icon>https://StandOutstar.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, StandOutstar</rights>
    <entry>
        <title type="html"><![CDATA[Mac 小技巧]]></title>
        <id>https://StandOutstar.github.io/post/mac-xiao-ji-qiao</id>
        <link href="https://StandOutstar.github.io/post/mac-xiao-ji-qiao">
        </link>
        <updated>2019-07-11T09:12:26.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>终端中使用命令控制剪贴板
<ul>
<li>终端命令输出到剪贴板: pbcopy</li>
<li>从剪贴板输出到终端: pbpaste<br>
示例：</li>
</ul>
<pre><code class="language-shell">$ echo hello | pbcopy
$ pbpaste
hello // 此为输出内容
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[接口测试之-测试流程]]></title>
        <id>https://StandOutstar.github.io/post/jie-kou-ce-shi-zhi-ce-shi-liu-cheng</id>
        <link href="https://StandOutstar.github.io/post/jie-kou-ce-shi-zhi-ce-shi-liu-cheng">
        </link>
        <updated>2019-07-08T12:49:59.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>
<p>需求讨论</p>
</li>
<li>
<p>需求评审</p>
</li>
<li>
<p>场景设计</p>
</li>
<li>
<p>用例设计：</p>
<ol start="0">
<li>目的：
<ul>
<li>理清思路，避免漏测；</li>
<li>提高测试效率，方便后续测试；</li>
<li>跟进测试进度；</li>
<li>结果有记录；</li>
<li>测试标准化</li>
</ul>
</li>
<li>功能用例设计: 获取接口文档</li>
<li>逻辑用例设计: 是否依赖业务</li>
<li>异常用例设计</li>
</ol>
<ul>
<li>参数异常:
<ul>
<li>关键字参数：把语言关键字作为参数名，比如 echo</li>
<li>参数多少：参数缺失，未知参数</li>
</ul>
</li>
<li>数据异常：
<ul>
<li>关键字数据：把语言关键字作为参数值，比如 echo</li>
<li>数据为空</li>
<li>长度不一致</li>
<li>错误数据</li>
</ul>
</li>
</ul>
<ol start="4">
<li>安全用例设计：
<ul>
<li>cookie</li>
<li>header</li>
<li>唯一识别码：比如设备识别码</li>
</ul>
</li>
</ol>
</li>
<li>
<p>数据准备</p>
</li>
<li>
<p>执行</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Goland Tips & Tricks]]></title>
        <id>https://StandOutstar.github.io/post/goland-tips-and-tricks</id>
        <link href="https://StandOutstar.github.io/post/goland-tips-and-tricks">
        </link>
        <updated>2019-07-08T12:23:53.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>From《Go 夜读》 on Bilibili.</p>
</blockquote>
<ol>
<li>显示按键信息的插件 Presentation Assistant</li>
<li>switcher: ctrl + tab</li>
<li>代码联想</li>
<li>F1 查看代码文档、示例</li>
<li>写完方法调用后加 '.' 会出现可以自动补全的功能，包括链式条用</li>
<li>handle err , err.nn 自动装换为 err 判断, err.panic 自动转换为 panic(err)</li>
<li>先使用，后自动生成代码，比如使用未声明的变量或struct，然后自动生成代码</li>
<li>command + E, recent file功能</li>
<li>recent location 功能，然后可以直接输入要过滤的字符，不如输入 user</li>
<li>功能搜索入口 双击 shift，</li>
<li>command + d，复制这一行</li>
<li>command + y，删除这一行</li>
<li>command + t，重构</li>
<li>F2 跳转到下一个错误地方</li>
<li>editor live-template，通过少部分缩写，引用已定义的代码片段</li>
<li>column edit，列编辑</li>
<li>补全和智能补全</li>
<li>通过重构自动生成新package，移动时也会显示异常信息</li>
<li>command + b，跳转声明并可以跳回</li>
<li>new http request</li>
<li>链接数据库</li>
<li>容器方式运行数据库</li>
<li>快速生成函数测试代码 generate</li>
<li>重构 change signature</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Golang 源码阅读]]></title>
        <id>https://StandOutstar.github.io/post/golang-yuan-ma-yue-du</id>
        <link href="https://StandOutstar.github.io/post/golang-yuan-ma-yue-du">
        </link>
        <updated>2019-06-19T01:16:28.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>https://github.com/zgoat/zlog</li>
</ol>
]]></content>
    </entry>
</feed>