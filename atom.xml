<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://StandOutstar.github.io</id>
    <title>Quin</title>
    <updated>2020-04-03T08:52:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://StandOutstar.github.io"/>
    <link rel="self" href="https://StandOutstar.github.io/atom.xml"/>
    <subtitle>Quin&apos;s Blog</subtitle>
    <logo>https://StandOutstar.github.io/images/avatar.png</logo>
    <icon>https://StandOutstar.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Quin</rights>
    <entry>
        <title type="html"><![CDATA[Golang-外部调用]]></title>
        <id>https://StandOutstar.github.io/post/golang-wai-bu-diao-yong/</id>
        <link href="https://StandOutstar.github.io/post/golang-wai-bu-diao-yong/">
        </link>
        <updated>2019-08-21T02:29:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="调用外部命令">调用外部命令</h1>
<!-- toc -->
<ul>
<li><a href="#%E7%94%9F%E6%88%90%E5%91%BD%E4%BB%A4">生成命令</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E5%91%BD%E4%BB%A4%E8%BE%93%E5%87%BA%E7%9B%AE%E6%A0%87">设置命令输出目标</a></li>
<li><a href="#%E8%BF%90%E8%A1%8C%E5%91%BD%E4%BB%A4">运行命令</a></li>
<li><a href="#%E8%BF%90%E8%A1%8C%E5%B9%B6%E8%8E%B7%E5%BE%97%E5%91%BD%E4%BB%A4%E8%BE%93%E5%87%BA">运行并获得命令输出</a></li>
<li><a href="#%E7%AE%A1%E9%81%93%E8%BF%9E%E6%8E%A5">管道连接</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E5%91%BD%E4%BB%A4%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">设置命令环境变量</a></li>
<li><a href="#%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4%E8%B7%AF%E5%BE%84">查找命令路径</a></li>
</ul>
<!-- tocstop -->
<h2 id="生成命令">生成命令</h2>
<ul>
<li><code>cmd := exec.Command(&quot;Program&quot;, &quot;arg1&quot;, &quot;arg2&quot;, ...)</code></li>
<li><code>cmd := exec.CommandContext(context, &quot;Program&quot;, &quot;arg1&quot;, &quot;arg2&quot;, ...)</code>，可以设置 context</li>
</ul>
<h2 id="设置命令输出目标">设置命令输出目标</h2>
<ul>
<li>设置命令标准输出</li>
</ul>
<pre><code>cmd.Stdout = os.Stdout
</code></pre>
<ul>
<li>设置命令标准错误输出</li>
</ul>
<pre><code>cmd.Stderr = os.Stderr 
</code></pre>
<h2 id="运行命令">运行命令</h2>
<ul>
<li>同步方式：</li>
</ul>
<pre><code>cmd.Run() 
</code></pre>
<ul>
<li>异步方式</li>
</ul>
<pre><code>cmd.Start() 
cmd.Wait() // 等待命令执行完成，并关闭自生成管道 
</code></pre>
<h2 id="运行并获得命令输出">运行并获得命令输出</h2>
<ul>
<li><code>cmd.Output()</code>， 只有stdout输出</li>
<li><code>cmd.CombinedOutput()</code>，stdout 和 stderr 输出</li>
</ul>
<h2 id="管道连接">管道连接</h2>
<ul>
<li>自定义管道</li>
</ul>
<pre><code>r, w := io.Pipe() // 自定义管道
cmd1.Stdout = w
cmd2.Stdin = r 
</code></pre>
<ul>
<li>cmd 生成管道</li>
</ul>
<pre><code>cmd1Out, _ := cmd1.StdoutPipe() 
cmd2.Stdin = cmd1Out 

// or 
cmd2In, _ := cmd2.StdinPipe() 
cmd1.Stdout = cmd2In
</code></pre>
<h2 id="设置命令环境变量">设置命令环境变量</h2>
<pre><code>cmd.Env = newEnv
</code></pre>
<h2 id="查找命令路径">查找命令路径</h2>
<pre><code>path, err := exec.LookPath(&quot;ls&quot;)
if err != nil {
    fmt.Printf(&quot;didn't find 'ls' executable\\n&quot;)
} else {
    fmt.Printf(&quot;'ls' executable is in '%s'\\n&quot;, path)
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[趣味学习]]></title>
        <id>https://StandOutstar.github.io/post/jian-dan-yi-xue-de-jiao-cai/</id>
        <link href="https://StandOutstar.github.io/post/jian-dan-yi-xue-de-jiao-cai/">
        </link>
        <updated>2019-08-20T10:25:12.000Z</updated>
        <content type="html"><![CDATA[<p>视频：</p>
<ul>
<li>3Blue1Brown: bilibili or YouTube</li>
</ul>
<p>CheatSheet:</p>
<ul>
<li>https://www.cheatography.com/language/zh/</li>
</ul>
<p>游戏化学习网站：</p>
<ul>
<li>Git： https://learngitbranching.js.org/</li>
<li>Python：https://py.checkio.org/</li>
</ul>
<p>可视化学习网站：</p>
<ul>
<li>Math: https://mathigon.org</li>
<li>Algorithm: https://github.com/algorithm-visualizer/algorithm-visualizer</li>
<li>Vim: https://www.openvim.com/</li>
</ul>
<p>在线编程学习：</p>
<ul>
<li>https://www.freecodecamp.cn/challenges/say-hello-to-html-element</li>
</ul>
<p>英语学习</p>
<ul>
<li>Drops App</li>
<li>多邻国</li>
<li>quizlet App &amp; Website:https://quizlet.com/latest</li>
<li>人人词典-简单课</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python Tricks]]></title>
        <id>https://StandOutstar.github.io/post/python-tricks/</id>
        <link href="https://StandOutstar.github.io/post/python-tricks/">
        </link>
        <updated>2019-07-19T02:14:32.000Z</updated>
        <content type="html"><![CDATA[<h2 id="快速开启文件分享服务">快速开启文件分享服务</h2>
<h3 id="开启服务">开启服务</h3>
<pre><code>$ python -m SimpleHTTPServer  //python2
or
$ python -m http.server  //python3
</code></pre>
<h3 id="访问服务">访问服务</h3>
<p>其他主机可以在同局域网下，访问 <code>&lt;该主机 IP&gt;:8000</code>，下载文件。端口当然可以修改，请进一步查阅使用。</p>
<h2 id="多平台路径转换">多平台路径转换</h2>
<p>Windows 上使用反斜杠<code>\</code>，Unix 上使用正斜杠<code>/</code><br>
如何方便的实现路径跨平台？</p>
<pre><code class="language-python">from pathlib import Path, 
file_dir = Path(&quot;some_dir/file_dir/&quot;)
filepath = file_dir / &quot;file_name.ext&quot;

print(filepath)
# output:
# windows: some_dir\file_dir\file_name.ext
# unix: some_dir/file_dir/file_name.ext

print(filepath.name)
# output: file_name.txt

print(filepath.suffix)
# output: txt

print(filepath.stm)
# output: file_name

print(filepath.exists())
# output: True or False
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac 小技巧]]></title>
        <id>https://StandOutstar.github.io/post/mac-xiao-ji-qiao/</id>
        <link href="https://StandOutstar.github.io/post/mac-xiao-ji-qiao/">
        </link>
        <updated>2019-07-11T09:12:26.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>终端中使用命令控制剪贴板
<ul>
<li>终端命令输出到剪贴板: pbcopy</li>
<li>从剪贴板输出到终端: pbpaste<br>
示例：</li>
</ul>
<pre><code class="language-shell">$ echo hello | pbcopy
$ pbpaste
// output: hello
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[接口测试之测试流程]]></title>
        <id>https://StandOutstar.github.io/post/jie-kou-ce-shi-zhi-ce-shi-liu-cheng/</id>
        <link href="https://StandOutstar.github.io/post/jie-kou-ce-shi-zhi-ce-shi-liu-cheng/">
        </link>
        <updated>2019-07-08T12:49:59.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>
<p>需求讨论</p>
</li>
<li>
<p>需求评审</p>
</li>
<li>
<p>场景设计</p>
</li>
<li>
<p>用例设计：</p>
<ol start="0">
<li>目的：
<ul>
<li>理清思路，避免漏测；</li>
<li>提高测试效率，方便后续测试；</li>
<li>跟进测试进度；</li>
<li>结果有记录；</li>
<li>测试标准化</li>
</ul>
</li>
<li>功能用例设计: 获取接口文档</li>
<li>逻辑用例设计: 是否依赖业务</li>
<li>异常用例设计</li>
</ol>
<ul>
<li>参数异常:
<ul>
<li>关键字参数：把语言关键字作为参数名，比如 echo</li>
<li>参数多少：参数缺失，未知参数</li>
</ul>
</li>
<li>数据异常：
<ul>
<li>关键字数据：把语言关键字作为参数值，比如 echo</li>
<li>数据为空</li>
<li>长度不一致</li>
<li>错误数据</li>
</ul>
</li>
</ul>
<ol start="4">
<li>安全用例设计：
<ul>
<li>cookie</li>
<li>header</li>
<li>唯一识别码：比如设备识别码</li>
</ul>
</li>
</ol>
</li>
<li>
<p>数据准备</p>
</li>
<li>
<p>执行</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Goland Tips & Tricks]]></title>
        <id>https://StandOutstar.github.io/post/goland-tips-and-tricks/</id>
        <link href="https://StandOutstar.github.io/post/goland-tips-and-tricks/">
        </link>
        <updated>2019-07-08T12:23:53.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>From《Go 夜读》 on Bilibili.</p>
</blockquote>
<ol>
<li>显示按键信息的插件 Presentation Assistant</li>
<li>switcher: ctrl + tab</li>
<li>代码联想</li>
<li>F1 查看代码文档、示例</li>
<li>写完方法调用后加 '.' 会出现可以自动补全的功能，包括链式条用</li>
<li>handle err , err.nn 自动装换为 err 判断, err.panic 自动转换为 panic(err)</li>
<li>先使用，后自动生成代码，比如使用未声明的变量或struct，然后自动生成代码</li>
<li>command + E, recent file功能</li>
<li>recent location 功能，然后可以直接输入要过滤的字符，不如输入 user</li>
<li>功能搜索入口 双击 shift，</li>
<li>command + d，复制这一行</li>
<li>command + y，删除这一行</li>
<li>command + t，重构</li>
<li>F2 跳转到下一个错误地方</li>
<li>editor live-template，通过少部分缩写，引用已定义的代码片段</li>
<li>column edit，列编辑</li>
<li>补全和智能补全</li>
<li>通过重构自动生成新package，移动时也会显示异常信息</li>
<li>command + b，跳转声明并可以跳回</li>
<li>new http request</li>
<li>链接数据库</li>
<li>容器方式运行数据库</li>
<li>快速生成函数测试代码 generate</li>
<li>重构 change signature</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[About Me]]></title>
        <id>https://StandOutstar.github.io/post/about-me/</id>
        <link href="https://StandOutstar.github.io/post/about-me/">
        </link>
        <updated>2019-06-20T02:28:28.000Z</updated>
        <content type="html"><![CDATA[<p>关注 5G，VR/AR，AI，物联网</p>
]]></content>
    </entry>
</feed>